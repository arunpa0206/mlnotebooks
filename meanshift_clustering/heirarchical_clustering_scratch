{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"heirarchical_clustering_scratch","provenance":[],"authorship_tag":"ABX9TyPStZgg45us1ScSuL53sKRB"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"id":"obJiMLISqtS1","executionInfo":{"status":"ok","timestamp":1613996229022,"user_tz":-330,"elapsed":945,"user":{"displayName":"meenakshi meyyammai","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgqOL6XSRGNDaYfV_dgRFMRv7m8ABRr31ql5RGa4g=s64","userId":"11768016833716445346"}},"outputId":"3e021f96-2eb1-4ed1-f34a-6e6f4b1182c1"},"source":["import matplotlib.pyplot as plt\r\n","from matplotlib import style\r\n","\r\n","style.use('ggplot')\r\n","import numpy as np\r\n","\r\n","X = np.array([[1, 2],\r\n","              [1.5, 1.8],\r\n","              [5, 8 ],\r\n","              [8, 8],\r\n","              [1, 0.6],\r\n","              [9,11],\r\n","              [8,2],\r\n","              [10,2],\r\n","              [9,3],])\r\n","\r\n","plt.scatter(X[:,0], X[:,1], s=150)\r\n","plt.show()\r\n"],"execution_count":1,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"id":"xVnOX0rAq-QR","executionInfo":{"status":"ok","timestamp":1613996239233,"user_tz":-330,"elapsed":1014,"user":{"displayName":"meenakshi meyyammai","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgqOL6XSRGNDaYfV_dgRFMRv7m8ABRr31ql5RGa4g=s64","userId":"11768016833716445346"}},"outputId":"fda69b4c-eeb6-4a99-8020-fba2de34c6d1"},"source":["\r\n","colors = 10*[\"g\",\"r\",\"c\",\"b\",\"k\"]\r\n","\r\n","class Mean_Shift:\r\n","    def __init__(self, radius=4):\r\n","        self.radius = radius#Initial cluster radius\r\n","\r\n","    def fit(self, data):\r\n","        centroids = {}\r\n","\r\n","        for i in range(len(data)):\r\n","            centroids[i] = data[i]#Every datapoint is clusteroid\r\n","\r\n","        while True:\r\n","            new_centroids = []\r\n","            for i in centroids:\r\n","                in_bandwidth = []\r\n","                centroid = centroids[i]\r\n","                for featureset in data:\r\n","                    if np.linalg.norm(featureset-centroid) < self.radius:\r\n","                        in_bandwidth.append(featureset)#Add features within bandwidth to cluster\r\n","                #Calculate new clusteroids\r\n","                new_centroid = np.average(in_bandwidth,axis=0)\r\n","                new_centroids.append(tuple(new_centroid))\r\n","\r\n","            uniques = sorted(list(set(new_centroids)))\r\n","\r\n","            prev_centroids = dict(centroids)\r\n","\r\n","            centroids = {}\r\n","            for i in range(len(uniques)):\r\n","                centroids[i] = np.array(uniques[i])\r\n","\r\n","            optimized = True\r\n","\r\n","            for i in centroids:\r\n","                if not np.array_equal(centroids[i], prev_centroids[i]):\r\n","                    optimized = False\r\n","                if not optimized:\r\n","                    break\r\n","\r\n","            #If centeroids are not moving                \r\n","            if optimized:\r\n","                break\r\n","\r\n","        self.centroids = centroids\r\n","\r\n","\r\n","\r\n","clf = Mean_Shift()\r\n","clf.fit(X)\r\n","\r\n","centroids = clf.centroids\r\n","\r\n","plt.scatter(X[:,0], X[:,1], s=150)\r\n","\r\n","for c in centroids:\r\n","    plt.scatter(centroids[c][0], centroids[c][1], color='k', marker='*', s=150)\r\n","\r\n","plt.show()"],"execution_count":2,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"LlCbqYTXrCVF"},"source":[""],"execution_count":null,"outputs":[]}]}